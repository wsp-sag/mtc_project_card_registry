---
project: 2_5_16_21_T11-98-MAJ_RedwoodCity_SF_Ferry
category: Add Transit
tags: 
  - 'Redwood City - SF Ferry'
dependencies:
  prerequisites: 
  - '2_5_16_21_T11-98-MAJ_RedwoodCity_SF_Ferry_add_ferry_link'
---

# this wrangler card adds 2 d0 + 2 d1 new trips for AM, PM
# route
add_routes_df = pd.DataFrame(
  {"route_id" : ["1000"],
   "route_id_original" : [""],
   "agency_id" : [""],
   "route_short_name" : [""],
   "route_long_name" : ["Redwood City - SF Ferry"],
   "route_type" : [4],
   "agency_raw_name" : ["SF_Bay_Ferry2016_07_01"]
  }
)
self.feed.routes = self.feed.routes.append(add_routes_df, sort = False, ignore_index = True)

# add direction 0 AM, PM
# trip
max_trip_id = self.feed.trips.trip_id.astype(int).max()
max_shape_id = self.feed.shapes.shape_id.astype(int).max()
trip_id_list = [max_trip_id+1,max_trip_id+2]

add_trips_df = pd.DataFrame(
  {"route_id" : "1000",
   "direction_id" : 0,
   "trip_id" : trip_id_list,
   "shape_id" : max_shape_id+1,
   "agency_raw_name" : "SF_Bay_Ferry2016_07_01"
  }
)
self.feed.trips = self.feed.trips.append(add_trips_df, sort = False, ignore_index = True)

# stop
stop_model_node_id_list = [1028039, 2900006]
stop_id_xref_dict = self.feed.stops.set_index("model_node_id")["stop_id"].to_dict()
stop_id_xref_dict = {int(key): int(value) for key, value in stop_id_xref_dict.items()}
model_node_coord_dict = self.road_net.nodes_df.set_index('model_node_id')[['X', 'Y']].apply(tuple, axis=1).to_dict()
model_node_coord_dict = {int(key): value for key, value in model_node_coord_dict.items()}
stop_id_list = [] # used to build stop_time
stop_id_new_list = [] # used to build stop
model_node_id_list = [] # used to build stop
stop_lat_list = [] # used to build stop
stop_lon_list = [] # used to build stop
stop_id_max = max(stop_id_xref_dict.values()) # assign stop_id to new stops

for s in stop_model_node_id_list:
    if s in stop_id_xref_dict.keys():
        stop_id_list.append(stop_id_xref_dict[s])
    else:
        stop_id_new = stop_id_max + 1
        stop_id_list.append(stop_id_new)
        stop_id_new_list.append(stop_id_new)
        model_node_id_list.append(s)
        stop_lat_list.append(model_node_coord_dict[s][1])
        stop_lon_list.append(model_node_coord_dict[s][0])
        stop_id_xref_dict.update({s: stop_id_new})
        stop_id_max += 1

add_stops_df = pd.DataFrame(
  {"stop_id" : stop_id_new_list,
   "stop_name" : "",
   "stop_lat" : stop_lat_list,
   "stop_lon" : stop_lon_list,
   "model_node_id" : model_node_id_list
  }
)
self.feed.stops = self.feed.stops.append(add_stops_df, sort = False, ignore_index = True)

# stop_time
stop_sequence_list = [1, 2]
arrival_time_list = [0, 3600]
departure_time_list = [0, 2600]
add_stop_times_df = []

for trip_id in trip_id_list:
    df = pd.DataFrame({
        "trip_id": [trip_id] * len(stop_id_list),
        "stop_sequence": stop_sequence_list,
        "arrival_time": arrival_time_list,
        "departure_time": departure_time_list,
        "stop_id": stop_id_list
    })
    add_stop_times_df.append(df)
self.feed.stop_times = self.feed.stop_times.append(add_stop_times_df, sort = False, ignore_index = True)

# shape
add_shapes_df = pd.DataFrame(
  {"shape_id" : max_shape_id+1,
   "shape_pt_sequence" : [1,2],
   "shape_model_node_id" : [1028039, 2900006]
  }
)
self.feed.shapes = self.feed.shapes.append(add_shapes_df, sort = False, ignore_index = True)

# frequency
add_freqs_df = pd.DataFrame(
  {"trip_id" : trip_id_list,
   "headway_secs" : [1800, 1800],
   "start_time" : [21600, 54000],
   "end_time" : [36000, 68400]
  }
)
self.feed.frequencies = self.feed.frequencies.append(add_freqs_df, sort = False, ignore_index = True)


# add direction 1 AM, PM
# trip
trip_id_list = [max_trip_id+3,max_trip_id+4]
add_trips_df = pd.DataFrame(
  {"route_id" : "1000",
   "direction_id" : 1,
   "trip_id" : trip_id_list,
   "shape_id" : max_shape_id+2,
   "agency_raw_name" : "SF_Bay_Ferry2016_07_01"
  }
)
self.feed.trips = self.feed.trips.append(add_trips_df, sort = False, ignore_index = True)

# stop
stop_model_node_id_list = [2900006,1028039]
stop_id_list = [] # used to build stop_time
stop_id_new_list = [] # used to build stop
model_node_id_list = [] # used to build stop
stop_lat_list = [] # used to build stop
stop_lon_list = [] # used to build stop
stop_id_max = max(stop_id_xref_dict.values()) # assign stop_id to new stops

for s in stop_model_node_id_list:
    if s in stop_id_xref_dict.keys():
        stop_id_list.append(stop_id_xref_dict[s])
    else:
        stop_id_new = stop_id_max + 1
        stop_id_list.append(stop_id_new)
        stop_id_new_list.append(stop_id_new)
        model_node_id_list.append(s)
        stop_lat_list.append(model_node_coord_dict[s][1])
        stop_lon_list.append(model_node_coord_dict[s][0])
        stop_id_xref_dict.update({s: stop_id_new})
        stop_id_max += 1

add_stops_df = pd.DataFrame(
  {"stop_id" : stop_id_new_list,
   "stop_name" : "",
   "stop_lat" : stop_lat_list,
   "stop_lon" : stop_lon_list,
   "model_node_id" : model_node_id_list
  }
)
self.feed.stops = self.feed.stops.append(add_stops_df, sort = False, ignore_index = True)

# stop_time
stop_sequence_list = [1, 2]
arrival_time_list = [0,3600]
departure_time_list = [0,3600]
add_stop_times_df = []

for trip_id in trip_id_list:
    df = pd.DataFrame({
        "trip_id": [trip_id] * len(stop_id_list),
        "stop_sequence": stop_sequence_list,
        "arrival_time": arrival_time_list,
        "departure_time": departure_time_list,
        "stop_id": stop_id_list
    })
    add_stop_times_df.append(df)
self.feed.stop_times = self.feed.stop_times.append(add_stop_times_df, sort = False, ignore_index = True)

# shape
add_shapes_df = pd.DataFrame(
  {"shape_id" : max_shape_id+2,
   "shape_pt_sequence" : [1,2],
   "shape_model_node_id" : [2900006,1028039]
  }
)
self.feed.shapes = self.feed.shapes.append(add_shapes_df, sort = False, ignore_index = True)

# frequency
add_freqs_df = pd.DataFrame(
  {"trip_id" : trip_id_list,
   "headway_secs" : [1800 , 1800],
   "start_time" : [21600, 54000],
   "end_time" : [36000, 68400]
  }
)
self.feed.frequencies = self.feed.frequencies.append(add_freqs_df, sort = False, ignore_index = True)
